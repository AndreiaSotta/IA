{
  "nodes": [
    {
      "parameters": {
        "url": "={{ $env.SUPABASE_URL }}/rest/v1/conversations",
        "options": {
          "timeout": 5000,
          "headers": {
            "Prefer": "return=minimal"
          }
        },
        "headers": {
          "Authorization": "Bearer {{ $env.SUPABASE_SERVICE_KEY }}",
          "apikey": "{{ $env.SUPABASE_SERVICE_KEY }}",
          "Content-Type": "application/json"
        },
        "httpMethod": "POST",
        "sendBody": true,
        "bodyContentType": "json",
        "jsonBody": "={\n  \"session_id\": \"{{ $json.sessionId }}\",\n  \"role\": \"assistant\",\n  \"message\": \"{{ $json.response }}\",\n  \"language\": \"{{ $json.detectedLanguage }}\",\n  \"confidence\": {{ $json.confidence || 0.8 }},\n  \"from_cache\": {{ $json.fromCache || false }},\n  \"created_at\": \"{{ $json.timestamp }}\"\n}"
      },
      "name": "Save AI Response",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        0,
        0
      ]
    },
    {
      "parameters": {
        "functionCode": "// Audit Logger: Prepares an audit log entry for storing in Supabase.\n// Uses a simpler UUID generation as 'crypto' module might not be available in n8n Code nodes.\n\nconst inputData = $json;\n\n// Simple hash for audit log data (non-cryptographic)\nfunction simpleHash(data) {\n    if (!data) return null;\n    let hash = 0;\n    for (let i = 0; i < data.length; i++) {\n        const char = data.charCodeAt(i);\n        hash = ((hash << 5) - hash) + char;\n        hash |= 0;\n    }\n    return Math.abs(hash).toString(16);\n}\n\n// Generate a simple UUID for error tracking\nfunction generateSimpleUUID() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n    const r = Math.random() * 16 | 0;\n    const v = c == 'x' ? r : (r & 0x3 | 0x8);\n    return v.toString(16);\n  });\n}\n\nconst auditEntry = {\n  session_id_hash: simpleHash(inputData.sessionId),\n  language: inputData.detectedLanguage,\n  user_message_hash: inputData.messageHash,\n  assistant_response_hash: simpleHash(inputData.response),\n  has_appointment_intent: inputData.hasAppointmentIntent || false,\n  appointment_created: !!inputData.eventId || false,\n  processing_time_ms: Date.now() - new Date(inputData.timestamp).getTime(),\n  ip_hash: inputData.hashedIP,\n  user_agent_hash: inputData.hashedUserAgent,\n  log_id: generateSimpleUUID(),\n  created_at: new Date().toISOString()\n};\n\nreturn [{ json: { ...inputData, auditEntry } }];"
      },
      "name": "Audit Logger",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        200,
        0
      ]
    },
    {
      "parameters": {
        "url": "={{ $env.SUPABASE_URL }}/rest/v1/audit_logs",
        "options": {
          "timeout": 5000,
          "headers": {
            "Prefer": "return=minimal"
          }
        },
        "headers": {
          "Authorization": "Bearer {{ $env.SUPABASE_SERVICE_KEY }}",
          "apikey": "{{ $env.SUPABASE_SERVICE_KEY }}",
          "Content-Type": "application/json"
        },
        "httpMethod": "POST",
        "sendBody": true,
        "bodyContentType": "json",
        "jsonBody": "={{ $json.auditEntry }}"
      },
      "name": "Save Audit Log",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        400,
        0
      ]
    },
    {
      "parameters": {
        "functionCode": "// Redis Cache Set: Prepares data to save AI response to Redis cache.\n\nconst inputData = $json;\nconst cacheData = {\n  response: inputData.response,\n  language: inputData.detectedLanguage,\n  sessionId: inputData.sessionId,\n  timestamp: inputData.timestamp\n};\n\n// Redis 'SET' command with expiry (EX) in seconds (10 minutes = 600 seconds)\nconst redisSetRequest = {\n  key: inputData.cacheKey,\n  value: JSON.stringify(cacheData),\n  ex: 600 \n};\n\nreturn [{ json: { ...inputData, redisSetRequest } }];"
      },
      "name": "Redis Cache Set",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        600,
        0
      ]
    },
    {
      "parameters": {
        "url": "={{ $env.REDIS_URL }}/set",
        "options": {
          "response": { "neverError": true }
        },
        "headers": {
          "Content-Type": "application/json"
        },
        "httpMethod": "POST",
        "sendBody": true,
        "bodyContentType": "json",
        "jsonBody": "={\n  \"key\": \"{{ $json.redisSetRequest.key }}\",\n  \"value\": \"{{ $json.redisSetRequest.value }}\",\n  \"ex\": {{ $json.redisSetRequest.ex }}\n}"
      },
      "name": "Execute Redis Set",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "credentials": {
        "httpHeaderAuth": {
          "id": "redisAuth",
          "name": "Redis API Key"
        }
      },
      "position": [
        800,
        0
      ]
    },
    {
      "parameters": {
        "functionCode": "// API Response Formatter: Formats the final JSON response for the webhook.\n\nconst inputData = $json;\n\nconst response = {\n  success: !inputData.isError,\n  data: {\n    message: inputData.response,\n    language: inputData.detectedLanguage,\n    sessionId: inputData.sessionId,\n    hasAppointmentIntent: inputData.hasAppointmentIntent || false,\n    appointmentCreated: !!inputData.eventId || false,\n    appointmentDetails: inputData.calendarData || null\n  },\n  metadata: {\n    processingTimeMs: Date.now() - new Date(inputData.timestamp).getTime(),\n    cached: !!inputData.fromCache,\n    timestamp: new Date().toISOString()\n  }\n};\n\nreturn [{ json: response }];"
      },
      "name": "API Response Formatter",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1000,
        0
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}"
      },
      "name": "API Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1200,
        0
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"response\": \"{{ $json.response }}\",\n  \"language\": \"{{ $json.detectedLanguage }}\",\n  \"sessionId\": \"{{ $json.sessionId }}\",\n  \"timestamp\": \"{{ $json.timestamp }}\",\n  \"fromCache\": true\n}"
      },
      "name": "Cached Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        0,
        200
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"error\": \"Message is empty\",\n  \"language\": \"en\",\n  \"timestamp\": \"{{ new Date().toISOString() }}\",\n  \"sessionId\": \"{{ $json.sessionId || 'unknown' }}\"\n}"
      },
      "name": "Empty Message Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        200,
        200
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"response\": \"{{ $json.response }}\",\n  \"language\": \"{{ $json.language }}\",\n  \"sessionId\": \"{{ $json.sessionId }}\",\n  \"timestamp\": \"{{ $json.timestamp }}\",\n  \"error\": true,\n  \"errorHandled\": true\n}"
      },
      "name": "Error Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        400,
        200
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"response\": \"{{ $json.response }}\",\n  \"language\": \"{{ $json.detectedLanguage }}\",\n  \"sessionId\": \"{{ $json.sessionId }}\",\n  \"timestamp\": \"{{ $json.timestamp }}\",\n  \"appointmentCreated\": true,\n  \"appointmentDetails\": {\n    \"eventId\": \"{{ $json.eventId }}\",\n    \"title\": \"{{ $json.eventTitle }}\",\n    \"startTime\": \"{{ $json.startDateTime }}\",\n    \"endTime\": \"{{ $json.endDateTime }}\",\n    \"type\": \"{{ $json.extractedAppointmentDetails.type }}\",\n    \"userEmail\": \"{{ $json.extractedAppointmentDetails.email }}\"\n  }\n}"
      },
      "name": "Appointment Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        600,
        200
      ]
    }
  ],
  "connections": {
    "Save AI Response": {
      "main": [
        [
          "Audit Logger",
          0
        ]
      ]
    },
    "Audit Logger": {
      "main": [
        [
          "Save Audit Log",
          0
        ]
      ]
    },
    "Save Audit Log": {
      "main": [
        [
          "Redis Cache Set",
          0
        ]
      ]
    },
    "Redis Cache Set": {
      "main": [
        [
          "Execute Redis Set",
          0
        ]
      ]
    },
    "Execute Redis Set": {
      "main": [
        [
          "API Response Formatter",
          0
        ]
      ]
    },
    "API Response Formatter": {
      "main": [
        [
          "API Response",
          0
        ]
      ]
    }
  },
  "name": "Save AI Response Sub-Workflow",
  "active": false,
  "id": "save-ai-response-sub-workflow",
  "meta": {
    "workflow": {
      "tags": []
    }
  },
  "settings": {
    "timezone": "Europe/Lisbon",
    "saveManualExecutions": false,
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": null
  },
  "staticData": {}
}
